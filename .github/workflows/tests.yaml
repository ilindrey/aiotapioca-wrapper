name: Tests

on:
  pull_request:
    branches:
    - main
    - dev
  push:
    branches:
    - main
    - dev

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  Testing:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
        install-via: [pip]
        arch: [x64]
        include:
        - python-version: '3.12'
          os: ubuntu-latest
          install-via: script
          arch: x64
        - python-version: '3.12'
          os: windows-latest
          install-via: pip
          arch: x86
    steps:
    - uses: actions/checkout@v4
    - name: Set Python 3.8
      uses: actions/setup-python@v5
      if: matrix.python-version != '3.8'
      with:
        python-version: '3.8'
        architecture: ${{ matrix.arch }}
    - name: Set Python 3.9
      uses: actions/setup-python@v5
      if: matrix.python-version != '3.9'
      with:
        python-version: '3.9'
        architecture: ${{ matrix.arch }}
    - name: Set Python 3.10
      uses: actions/setup-python@v5
      if: matrix.python-version != '3.10'
      with:
        python-version: '3.10'
        architecture: ${{ matrix.arch }}
    - name: Set Python 3.11
      uses: actions/setup-python@v5
      if: matrix.python-version != '3.11'
      with:
        python-version: '3.11'
        architecture: ${{ matrix.arch }}
    - name: Set Python 3.12
      uses: actions/setup-python@v5
      if: matrix.python-version != '3.12'
      with:
        python-version: '3.12'
        architecture: ${{ matrix.arch }}
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v5
#      with:
#        python-version: ${{ matrix.python-version }}
#        architecture: ${{ matrix.arch }}
    - name: Set Variables
      id: set_variables
      shell: bash
      run: |
        echo "PY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_STATE
        echo "PIP_CACHE=$(pip cache dir)" >> $GITHUB_OUTPUT
    - name: Cache PIP
      uses: actions/cache@v4
      with:
        path: ${{ steps.set_variables.outputs.PIP_CACHE }}
        key: ${{ runner.os }}-pip-${{ steps.set_variables.outputs.PY }}
    - name: Cache venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-
    - name: Install current PDM via pip
      run: python -m pip install -U pdm
    - name: Install Dev Dependencies
      run: |
        pdm install -v -G:all
        pdm info
    - name: Run Tests
      run: pdm run pytest --cov=aiotapioca --cov-config=pyproject.toml --cov-report=xml tests
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: tests
    - name: Run mypy
      run: pdm run mypy .
